{"version":3,"sources":["NewDisplay/NewDisplay.module.css","NumberInput/NumberInput.module.css","Header/Header.module.css","Button/Button.module.css","Button/Button.tsx","OnDisplayValue/OnDisplayValue.tsx","NumberInput/NumberInput.tsx","NewDisplay/NewDisplay.tsx","Header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","className","s","button","onClick","onClickHandler","disabled","buttonName","OnDisplayValue","valuesEntered","valueDisplay","presentCount","maxCount","red","NumberInput","allNumberInput","title","error","inputError","input","type","value","onChange","e","currentTarget","onChangeHandler","Number","NewDisplay","maxCountError","minCount","display","setMaxCountCallback","setMinCountCallback","setCounts","setDisabled","setPresentCountCallback","incReset","setInitialValue","resetDisabled","setDisplayCall","Header","useState","localStorage","getItem","setMinCount","setMaxCount","setPresentCount","setValuesEntered","setError","displays","_minCount","_maxCount","setItem","toString","MAX_SAFE_INTEGER","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f320204e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"NewDisplay_display__1TWDI\",\"valueDisplay\":\"NewDisplay_valueDisplay__15HlR\",\"button\":\"NewDisplay_button__VuL4z\",\"red\":\"NewDisplay_red__1q6w1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allNumberInput\":\"NumberInput_allNumberInput__2541M\",\"input\":\"NumberInput_input__3tY8b\",\"inputError\":\"NumberInput_inputError__2bYjV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displays\":\"Header_displays__1sPIg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__K4OXL\"};","import s from \"./Button.module.css\"\r\nimport React from \"react\";\r\n\r\ntype ButtonType ={\r\n    buttonName:string\r\n    onClickHandler: ()=>void\r\n    disabled?:boolean;\r\n    minCountGet?: number\r\n    maxCountGet?: number\r\n}\r\n\r\n\r\nexport const Button: React.FC<ButtonType> = (props)=>{\r\n    return(\r\n        <div>\r\n       <button className={s.button} onClick={props.onClickHandler} disabled={props.disabled}>{props.buttonName} </button>\r\n        </div>\r\n    )\r\n}","import s from \"../NewDisplay/NewDisplay.module.css\";\r\nimport React from \"react\";\r\n\r\ntype OnDisplayValueType = {\r\n    presentCount: number\r\n    maxCount: number\r\n    valuesEntered: boolean\r\n}\r\n\r\n\r\nexport function OnDisplayValue(props: OnDisplayValueType) {\r\n    return (\r\n        props.valuesEntered\r\n            ? <div className={s.valueDisplay}> Enter values and press \"Set\" </div>\r\n            : (props.presentCount === props.maxCount)\r\n            ? <div className={s.valueDisplay}><div className={s.red}> {props.presentCount}</div></div>\r\n            : <div className={s.valueDisplay}> {props.presentCount} </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./NumberInput.module.css\";\r\ntype NumberInputType = {\r\n    title: string\r\n    value: number\r\n    error:boolean\r\n    onChangeHandler: (value: number) => void\r\n}\r\nexport const NumberInput = (props: NumberInputType) => {\r\n    const setMaxCount = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget) {\r\n            props.onChangeHandler(Number(e.currentTarget.value))\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.allNumberInput}>\r\n            <div> {props.title}</div>\r\n            <input className={props.error?s.inputError:s.input}\r\n                type=\"number\"\r\n                value={props.value}\r\n                onChange={setMaxCount}/>\r\n        </div>\r\n    )\r\n}","import s from \"./NewDisplay.module.css\";\r\nimport {Button} from \"../Button/Button\";\r\nimport React from \"react\";\r\nimport {OnDisplayValue} from \"../OnDisplayValue/OnDisplayValue\";\r\nimport {NumberInput} from \"../NumberInput/NumberInput\";\r\n\r\n\r\ntype NewDisplayType = {\r\n    error: boolean\r\n    minCount: number\r\n    maxCount: number\r\n    incReset: boolean\r\n    presentCount: number\r\n    setDisabled: boolean\r\n    resetDisabled: boolean\r\n    valuesEntered: boolean\r\n    setDisplayCall: () => void\r\n    setInitialValue: () => void\r\n    setMinCountCallback: (minCount: number) => void\r\n    setMaxCountCallback: (maxCount: number) => void\r\n    setCounts: (minCount: number, maxCount: number) => void\r\n    setPresentCountCallback: (presentCount: number) => void\r\n}\r\n\r\nexport const NewDisplay: React.FC<NewDisplayType> = (props) => {\r\n\r\n    const setPresentCountCallback = () => {\r\n        props.setPresentCountCallback(props.presentCount)\r\n    }\r\n// при увеличении minCount\r\n    let maxCountError = props.error && props.minCount > -1\r\n    // handler нажатия на кнопку SET\r\n\r\n    const setInitialValue = () => {\r\n        props.setInitialValue()\r\n    }\r\n    const setCounts = () => {\r\n        props.setCounts(props.minCount, props.maxCount)\r\n    }\r\n// return\r\n    if (props.valuesEntered) {\r\n        return (<div className={s.display}>\r\n                <div className={s.valueDisplay}>\r\n                    <NumberInput\r\n                        title=\"max value\"\r\n                        error={maxCountError}\r\n                        value={props.maxCount}\r\n                        onChangeHandler={props.setMaxCountCallback}/>\r\n                    <NumberInput\r\n                        error={props.error}\r\n                        title=\"min value\"\r\n                        value={props.minCount}\r\n                        onChangeHandler={props.setMinCountCallback}/>\r\n                </div>\r\n\r\n                    <div className={s.button}>\r\n                        <Button\r\n                            buttonName=\"set\"\r\n                            onClickHandler={setCounts}\r\n                            disabled={props.setDisabled}/>\r\n                    </div>\r\n            </div>\r\n    )\r\n    } else {\r\n        return (<div className={s.display}>\r\n                        <OnDisplayValue\r\n                            presentCount={props.presentCount}\r\n                            maxCount={props.maxCount}\r\n                            valuesEntered={props.valuesEntered}\r\n                        />\r\n                <div className={s.button}>\r\n                    <Button buttonName=\"Inc\"\r\n                            onClickHandler={setPresentCountCallback}\r\n                            disabled={props.incReset}/>\r\n                    <Button buttonName=\"reset\"\r\n                            onClickHandler={setInitialValue}\r\n                            disabled={props.resetDisabled}/>\r\n                    <Button buttonName=\"set\"\r\n                            onClickHandler={props.setDisplayCall}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import s from \"./Header.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport {NewDisplay} from \"../NewDisplay/NewDisplay\";\r\n\r\n\r\nexport const Header = () => {\r\n    // создаем переменные минимального, максимального и текущего значения, используем useState\r\n    const [minCount, setMinCount] = useState<number>((Number(localStorage.getItem(\"minCount\"))))\r\n    const [maxCount, setMaxCount] = useState<number>(Number(localStorage.getItem(\"maxCount\")))\r\n    const [presentCount, setPresentCount] = useState<number>(minCount)\r\n    // переменная , отвечающая, данные введены и нажат SET\r\n    const [valuesEntered, setValuesEntered] = useState<boolean>(false)\r\n    // переменная ошибки ввода\r\n    const [error, setError] = useState<boolean>(false)\r\n    //переменная дективации кнопки SET\r\n    let setDisabled = true\r\n    if (valuesEntered && !error) {\r\n        setDisabled = false\r\n    }\r\n// переменная деактивации кнопки Reset\r\n    let resetDisabled = false\r\n    if (error || valuesEntered) {\r\n        resetDisabled = true\r\n    }\r\n// переменная деактивации кнопки Inc\r\n    let incReset: boolean = false\r\n    if (error || valuesEntered || maxCount === presentCount) {\r\n        incReset = true\r\n    }\r\n    //  функция изменения минимального значения\r\n    const setMinCountCallback = (minCount: number) => {\r\n        if (minCount > Number.MAX_SAFE_INTEGER ||  //  проверка на   самое большое целое число JS\r\n            minCount % 1 !== 0 ||   //проверка на то, что число целое ( можно было сделать через Number.isInteger(число))\r\n            minCount < 0 || // проверка на то, что число больше нуля\r\n            minCount >= maxCount) {  // проверка на то, что   введенное число число меньше _maxCount\r\n            setError(true)\r\n            setMinCount(minCount)\r\n        } else {\r\n            setError(false)\r\n            setMinCount(minCount)\r\n            setValuesEntered(true)\r\n        }\r\n    }\r\n    //  функция изменения максимального значения\r\n    const setMaxCountCallback = (maxCount: number) => {\r\n        if (maxCount > Number.MAX_SAFE_INTEGER ||  //  проверка на   самое большое целое число JS\r\n            maxCount % 1 !== 0 || //проверка на то, что число целое ( можно было сделать через Number.isInteger(число))\r\n            maxCount < 0 || // проверка на то, что число больше нуля\r\n            maxCount <= minCount  // проверка на то, что   введенное число число больше _mimCount\r\n        ) {\r\n            setError(true)\r\n            setMaxCount(maxCount)\r\n        } else {\r\n            setError(false)\r\n            setMaxCount(maxCount)\r\n            setPresentCount(minCount)\r\n            setValuesEntered(true)\r\n        }\r\n    }\r\n    //  функция изменения текущего значения\r\n    const setPresentCountCallback = (presentCount: number) => {\r\n        if (presentCount > Number.MAX_SAFE_INTEGER ||  //  проверка на   самое большое целое число JS\r\n            presentCount % 1 !== 0 || //проверка на то, что число целое ( можно было сделать через Number.isInteger(число))\r\n            presentCount < 0 || // проверка на то, что число больше нуля\r\n            presentCount < minCount || // проверка на то, что   введенное число число больше _mimCount\r\n            presentCount > maxCount\r\n        ) {\r\n            setPresentCount(minCount)\r\n        } else if (presentCount === maxCount - 1) {\r\n            setPresentCount(presentCount + 1)\r\n        } else\r\n            setPresentCount(presentCount + 1)\r\n    }\r\n// функция установки начального значения счетчика на минимальное\r\n    const setInitialValue = () => {\r\n        setPresentCount(minCount)\r\n        setValuesEntered(false)\r\n    }\r\n// функция установки мин/макс значения в локалсторедж\r\n    const setCounts = (_minCount: number, _maxCount: number) => {\r\n        localStorage.setItem(\"minCount\", _minCount.toString())\r\n        localStorage.setItem(\"maxCount\", _maxCount.toString())\r\n        setInitialValue()\r\n    }\r\n    // функция вызова дисплея настройки значений\r\n    const setDisplayCall = () => {\r\n        setValuesEntered(true)\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <h1> Counter v2</h1>\r\n            <div className={s.displays}>\r\n                <NewDisplay\r\n                    error={error}\r\n                    minCount={minCount}\r\n                    maxCount={maxCount}\r\n                    incReset={incReset}\r\n                    setCounts={setCounts}\r\n                    setDisabled={setDisabled}\r\n                    presentCount={presentCount}\r\n                    valuesEntered={valuesEntered}\r\n                    resetDisabled={resetDisabled}\r\n                    setDisplayCall={setDisplayCall}\r\n                    setInitialValue={setInitialValue}\r\n                    setPresentCountCallback={setPresentCountCallback}\r\n                    setMinCountCallback={setMinCountCallback}\r\n                    setMaxCountCallback={setMaxCountCallback}\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Header} from \"./Header/Header\";\n\n\nfunction App() {\n    return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Header/>\n                </header>\n            </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}