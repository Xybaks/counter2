{"version":3,"sources":["Header/Header.module.css","Button/Button.module.css","Button/Button.tsx","OnDisplayValue/OnDisplayValue.tsx","NumberInput/NumberInput.tsx","state/counterReducer.ts","NewDisplay/NewDisplay.tsx","Header/Header.tsx","App.tsx","reportWebVitals.ts","state/reduxStore/store.ts","index.tsx","NewDisplay/NewDisplay.module.css","NumberInput/NumberInput.module.css"],"names":["module","exports","Button","props","className","s","button","onClick","onClickHandler","disabled","buttonName","React","memo","OnDisplayValue","presentCount","maxCount","valueDisplay","red","NumberInput","allNumberInput","title","error","inputError","input","type","value","onChange","e","currentTarget","onChangeHandler","Number","SET_MIN_COUNT","SET_MAX_COUNT","SET_PRESENT_COUNT","SET_INITIAL_VALUE","SET_DISPLAY","getCountsFromLocalStorage","minCountLS","maxCountLS","localStorage","getItem","initialState","minCount","isValuesNotEntered","setDisabled","resetDisabled","incReset","setInitialValue","NewDisplay","state","useSelector","counterState","dispatch","useDispatch","maxCountError","setPresentCountCallback","useCallback","setInitialValueCallback","setCountsCallback","setItem","toString","setMaxCountCallback","setMinCountCallback","setDisplayCallback","display","Header","displays","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","MAX_SAFE_INTEGER","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edaf0f45.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"displays\":\"Header_displays__1sPIg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__K4OXL\"};","import s from \"./Button.module.css\"\r\nimport React from \"react\";\r\n\r\ntype ButtonType ={\r\n    buttonName:string\r\n    onClickHandler: ()=>void\r\n    disabled?:boolean;\r\n    minCountGet?: number\r\n    maxCountGet?: number\r\n}\r\n\r\n\r\nconst Button: React.FC<ButtonType> = (props)=>{\r\n\r\n    return(\r\n        <div>\r\n       <button className={s.button} onClick={props.onClickHandler} disabled={props.disabled}>{props.buttonName} </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Button)","import s from \"../NewDisplay/NewDisplay.module.css\";\r\nimport React from \"react\";\r\n\r\ntype OnDisplayValueType = {\r\n    presentCount: number\r\n    maxCount: number\r\n}\r\n\r\n\r\nconst OnDisplayValue:React.FC<OnDisplayValueType>=(props)=> {\r\n\r\n    return (\r\n      props.presentCount === props.maxCount\r\n            ? <div className={s.valueDisplay}><div className={s.red}> {props.presentCount}</div></div>\r\n            : <div className={s.valueDisplay}> {props.presentCount} </div>\r\n    )\r\n}\r\nexport default OnDisplayValue","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./NumberInput.module.css\";\r\n\r\ntype NumberInputType = {\r\n    title: string\r\n    value: number\r\n    error: boolean\r\n    onChangeHandler: (value: number) => void\r\n}\r\nconst NumberInput = (props: NumberInputType) => {\r\n\r\n    const setMaxCount = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget) {\r\n            props.onChangeHandler(Number(e.currentTarget.value))\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.allNumberInput}>\r\n            <div> {props.title}</div>\r\n            <input className={props.error ? s.inputError : s.input}\r\n                   type=\"number\"\r\n                   value={props.value}\r\n                   onChange={setMaxCount}/>\r\n        </div>\r\n    )\r\n}\r\nexport default React.memo(NumberInput)","export const SET_MIN_COUNT = 'SET-MIN-COUNT'\r\nexport const SET_MAX_COUNT = 'SET-MAX-COUNT'\r\nexport const SET_PRESENT_COUNT = 'SET-PRESENT-COUNT'\r\nexport const SET_INITIAL_VALUE = 'SET-INITIAL-VALUE'\r\nexport const SET_DISPLAY = 'SET-DISPLAY'\r\nexport const SET_LOCALSTORAGE_COUNTS = 'SET-LOCALSTORAGE-COUNTS'\r\n\r\nexport type CounterStateType = typeof initialState\r\nexport type ActionsTypes = setMinCountActionType | setMaxCountActionType | setPresentCountActionType\r\n    | setInitialValueActionType | setDisplayActionType\r\n\r\n//функция пролучения из локалстораджа значений с типизацией получаемого объекта\r\nconst getCountsFromLocalStorage = (): {minCountLS: number, maxCountLS: number } => {\r\n    let minCountLS = 0\r\n    let maxCountLS = 5\r\n    // проверка, вдруг отключен localStorage у пользователя\r\n    try {\r\n        minCountLS = Number(localStorage.getItem(\"minCount\"))\r\n        maxCountLS = Number(localStorage.getItem(\"maxCount\"))\r\n       // эта проверка нужна, чтобы при вервом запуске не выдавало maxCountLS=0\r\n        if (maxCountLS === 0) {\r\n            maxCountLS = 5\r\n        }\r\n    } catch {\r\n        // на всякий случай\r\n        return {minCountLS: minCountLS, maxCountLS: maxCountLS}\r\n    }\r\n    return {minCountLS: minCountLS, maxCountLS: maxCountLS}\r\n}\r\n\r\nconst initialState = {\r\n    minCount: getCountsFromLocalStorage().minCountLS as number,\r\n    maxCount: getCountsFromLocalStorage().maxCountLS as number,\r\n    presentCount: 0,\r\n    isValuesNotEntered: true, // заданы ли значения minCount/maxCount\r\n    error: false,\r\n    setDisabled: false,\r\n    resetDisabled: false,\r\n    incReset: false\r\n}\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionsTypes): CounterStateType => {\r\n    switch (action.type) {\r\n        //ввод минимаьлного значения счетчика\r\n        case SET_MIN_COUNT: {\r\n            if (\r\n                action.minCount > Number.MAX_SAFE_INTEGER ||  //  проверка на   самое большое целое число JS\r\n                action.minCount % 1 !== 0 ||   //проверка на то, что число целое ( можно было сделать через Number.isInteger(число))\r\n                action.minCount < 0 || // проверка на то, что число больше нуля\r\n                action.minCount >= state.maxCount\r\n            ) {\r\n                return {...state, error: true, minCount: action.minCount, setDisabled: true}\r\n            } else return {...state, error: false, minCount: action.minCount, isValuesNotEntered: true, setDisabled: false}\r\n        }\r\n        //ввод максимального значения счетчика\r\n        case SET_MAX_COUNT: {\r\n            if (action.maxCount > Number.MAX_SAFE_INTEGER ||  //  проверка на   самое большое целое число JS\r\n                action.maxCount % 1 !== 0 || //проверка на то, что число целое ( можно было сделать через Number.isInteger(число))\r\n                action.maxCount < 0 || // проверка на то, что число больше нуля\r\n                action.maxCount <= state.minCount  // проверка на то, что   введенное число число больше _mimCount\r\n            ) {\r\n                return {...state, error: true, maxCount: action.maxCount, setDisabled: true}\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    error: false,\r\n                    maxCount: action.maxCount,\r\n                    presentCount: state.minCount,\r\n                    isValuesNotEntered: true,\r\n                    setDisabled: false\r\n                }\r\n            }\r\n        }\r\n        //ввод текущего значения счетчика\r\n        case   SET_PRESENT_COUNT: {\r\n            if (\r\n                action.presentCount > Number.MAX_SAFE_INTEGER ||  //  проверка на   самое большое целое число JS\r\n                action.presentCount % 1 !== 0 || //проверка на то, что число целое ( можно было сделать через Number.isInteger(число))\r\n                action.presentCount < 0 || // проверка на то, что число больше нуля\r\n                action.presentCount < state.minCount || // проверка на то, что   введенное число число больше _mimCount\r\n                action.presentCount > state.maxCount\r\n            ) {\r\n                return {...state, presentCount: state.minCount}\r\n            } else if (action.presentCount === state.maxCount - 1) {\r\n                return {...state, incReset: true, presentCount: action.presentCount + 1}\r\n            } else\r\n                return {...state, presentCount: action.presentCount + 1}\r\n        }\r\n        //  ввод выбранных  минимального и максимаьлного значений счетчика\r\n        case SET_INITIAL_VALUE: {\r\n            return {...state, presentCount: state.minCount, isValuesNotEntered: false, incReset: false}\r\n        }\r\n        //выбор отображаемого дисплея (основной/ для становки значений)\r\n        case SET_DISPLAY: {\r\n            return {...state, isValuesNotEntered: true}\r\n        }\r\n        // добаление в localStorage\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n// ActionCreators\r\nexport const setMinCount = (minCount: number) => ({type: SET_MIN_COUNT, minCount} as const)\r\nexport const setMaxCount = (maxCount: number) => ({type: SET_MAX_COUNT, maxCount} as const)\r\nexport const setPresentCount = (presentCount: number) => ({type: SET_PRESENT_COUNT, presentCount} as const)\r\nexport const setInitialValue = () => ({type: SET_INITIAL_VALUE} as const)\r\nexport const setDisplay = () => ({type: SET_DISPLAY} as const)\r\n\r\n\r\ntype setMinCountActionType = ReturnType<typeof setMinCount>\r\ntype setMaxCountActionType = ReturnType<typeof setMaxCount>\r\ntype setPresentCountActionType = ReturnType<typeof setPresentCount>\r\ntype setInitialValueActionType = ReturnType<typeof setInitialValue>\r\ntype setDisplayActionType = ReturnType<typeof setDisplay>\r\n\r\n","import s from \"./NewDisplay.module.css\";\r\nimport Button from \"../Button/Button\";\r\nimport React, {useCallback} from \"react\";\r\nimport OnDisplayValue from \"../OnDisplayValue/OnDisplayValue\";\r\nimport NumberInput from \"../NumberInput/NumberInput\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/reduxStore/store\";\r\nimport {\r\n    CounterStateType, setDisplay, setInitialValue,\r\n    setMaxCount, setMinCount, setPresentCount\r\n} from \"../state/counterReducer\";\r\n\r\n\r\nexport const NewDisplay = () => {\r\n// достаем наш state из редоксовского стора )(хуком useSelector)\r\n    const state = useSelector<AppRootStateType, CounterStateType>(state => state.counterState)\r\n// достаем наш  dispatch   из редоксовского стора (хуком useDispatch)\r\n    const dispatch = useDispatch();\r\n// отрисовка ошибки на поле ввода maxCount\r\n    let maxCountError = state.error && (state.minCount > -1)\r\n    // наши коллбэки, в которых вызываем диспатч с помощью ActionCreators\r\n    const setPresentCountCallback = useCallback(() => {\r\n        dispatch(setPresentCount(state.presentCount))\r\n    }, [dispatch, state.presentCount])\r\n\r\n    const setInitialValueCallback = useCallback(() => {\r\n        dispatch(setInitialValue())\r\n    }, [dispatch])\r\n\r\n    const setCountsCallback = useCallback(() => {\r\n        dispatch(setInitialValue())\r\n        //вносим в локалсторадж значения при нажатии на  set\r\n        try {\r\n            localStorage.setItem(\"minCount\", state.minCount.toString())\r\n            localStorage.setItem(\"maxCount\", state.maxCount.toString())\r\n        } finally {\r\n        }\r\n    }, [dispatch, state.minCount, state.maxCount])\r\n\r\n    const setMaxCountCallback = useCallback((value: number) => {\r\n        dispatch(setMaxCount(value))\r\n    }, [dispatch])\r\n\r\n    const setMinCountCallback = useCallback((value: number) => {\r\n        dispatch(setMinCount(value))\r\n    }, [dispatch])\r\n\r\n    const setDisplayCallback = useCallback(() => {\r\n        dispatch(setDisplay())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        state.isValuesNotEntered\r\n            ? //  return при уже  заданных значениях\r\n            <div className={s.display}>\r\n                <div className={s.valueDisplay}>\r\n                    <NumberInput\r\n                        title=\"max value\"\r\n                        error={maxCountError}\r\n                        value={state.maxCount}\r\n                        onChangeHandler={setMaxCountCallback}/>\r\n                    <NumberInput\r\n                        error={state.error}\r\n                        title=\"min value\"\r\n                        value={state.minCount}\r\n                        onChangeHandler={setMinCountCallback}/>\r\n                </div>\r\n\r\n                <div className={s.button}>\r\n                    <Button\r\n                        buttonName=\"set\"\r\n                        onClickHandler={setCountsCallback}\r\n                        disabled={state.setDisabled}/>\r\n                </div>\r\n            </div>\r\n            : //  return при вводе значений\r\n            <div className={s.display}>\r\n                <OnDisplayValue\r\n                    presentCount={state.presentCount}\r\n                    maxCount={state.maxCount}\r\n                />\r\n                <div className={s.button}>\r\n                    <Button buttonName=\"Inc\"\r\n                            onClickHandler={setPresentCountCallback}\r\n                            disabled={state.incReset}/>\r\n                    <Button buttonName=\"reset\"\r\n                            onClickHandler={setInitialValueCallback}\r\n                            disabled={state.resetDisabled}/>\r\n                    <Button buttonName=\"set\"\r\n                            onClickHandler={setDisplayCallback}\r\n                            disabled={state.setDisabled}\r\n                    />\r\n                </div>\r\n            </div>\r\n    )\r\n\r\n}\r\n\r\n","import s from \"./Header.module.css\";\r\nimport React from \"react\";\r\nimport {NewDisplay} from \"../NewDisplay/NewDisplay\";\r\n\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div>\r\n            <h1> Counter</h1>\r\n            <div className={s.displays}>\r\n                <NewDisplay/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Header} from \"./Header/Header\";\n\n\nfunction App() {\n    return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Header/>\n                </header>\n            </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nimport {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"../counterReducer\";\r\n\r\n// да, можно и обойтис, т.к. 1 радюсер, но буду делать по уму\r\nconst rootReducer = combineReducers({\r\n    counterState: counterReducer\r\n})\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//  это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/reduxStore/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n          </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"NewDisplay_display__1TWDI\",\"valueDisplay\":\"NewDisplay_valueDisplay__15HlR\",\"button\":\"NewDisplay_button__VuL4z\",\"red\":\"NewDisplay_red__1q6w1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allNumberInput\":\"NumberInput_allNumberInput__2541M\",\"input\":\"NumberInput_input__3tY8b\",\"inputError\":\"NumberInput_inputError__2bYjV\"};"],"sourceRoot":""}